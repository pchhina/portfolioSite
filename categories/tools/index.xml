<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Paramjot Singh</title>
    <link>https://paramjot.io/categories/tools/</link>
    <description>Recent content in Tools on Paramjot Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Dec 2018 18:34:58 -0600</lastBuildDate>
    
	<atom:link href="https://paramjot.io/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quizme Development</title>
      <link>https://paramjot.io/post/quizme-development/</link>
      <pubDate>Tue, 25 Dec 2018 18:34:58 -0600</pubDate>
      
      <guid>https://paramjot.io/post/quizme-development/</guid>
      <description>Quizme is an R package that allows you to create a personalized quiz repository and enables you to learn any material efficiently. Here I describe the functional logic underlying this package. I will discuss the layout of data structures employed and briefly describe the role of almost all of the user and backend functions.
Overall Structure At the beginning following data structures are created (or read if these exist from an earlier session):</description>
    </item>
    
    <item>
      <title>Quizme Design</title>
      <link>https://paramjot.io/post/quizme-design/</link>
      <pubDate>Sun, 23 Dec 2018 15:53:00 -0600</pubDate>
      
      <guid>https://paramjot.io/post/quizme-design/</guid>
      <description>Introduction The idea of quizme started with a need to learn R more effectively as I could not spend more than few hours a day outside of my regular life. My first approach to the problem, while I thought was neat, needed a lot of manual intervention. In this design, I had two text files - one containing questions and another containing questions and answers. A simple function would randomly select 10 questions.</description>
    </item>
    
    <item>
      <title>Testing and Continuous Integration in R</title>
      <link>https://paramjot.io/post/unit-testing-r-with-testthat/</link>
      <pubDate>Wed, 10 Oct 2018 05:27:31 -0500</pubDate>
      
      <guid>https://paramjot.io/post/unit-testing-r-with-testthat/</guid>
      <description>Often a useful function will do what we expected it to do. But sometimes it will do the unexpected. It is easy to find and address this unexpected behavior at the time of writing the function but becomes increasingly hard as the time goes by, codebase expands and dependencies become complex.
To decrease the frustration when unexpected behavior occurs, it is desirable to automate the testing process. This can be accomplished by adding the following steps in your package development workflow:</description>
    </item>
    
    <item>
      <title>Just Enough... Vim</title>
      <link>https://paramjot.io/post/just-enough-vim/</link>
      <pubDate>Tue, 06 Mar 2018 05:05:20 -0600</pubDate>
      
      <guid>https://paramjot.io/post/just-enough-vim/</guid>
      <description>Vim is an extremely powerful editor. It is a bit scary in the beginning but once you spend a little bit time playing with it, you would start to realize its power. One of the great advantages I feel about learning Vim (when compared to a dedicated IDE) is that it is language neutral. So if you switch to learning a new language in the future, you do not have to learn the ins and outs of a new IDE, Vim will be there for you.</description>
    </item>
    
    <item>
      <title>Atreus Building Experience</title>
      <link>https://paramjot.io/post/atreus/</link>
      <pubDate>Mon, 05 Mar 2018 05:39:51 -0600</pubDate>
      
      <guid>https://paramjot.io/post/atreus/</guid>
      <description>Here I write about my atreus keyboard builing experience. Atreus is a keyboard with very unique features like small form factor, freedom to program any key the way you want, ability to work with any OS without installing any driver and the best of all - the freedom to build it with your own hands the way you like it. So in this regard, it is the experience of personalizing your hardware!</description>
    </item>
    
    <item>
      <title>Building R Package using Command Line</title>
      <link>https://paramjot.io/post/package_building/</link>
      <pubDate>Sat, 10 Feb 2018 05:04:40 -0600</pubDate>
      
      <guid>https://paramjot.io/post/package_building/</guid>
      <description>This post describes the process of building an R package without using RStudio. This can come in handy for anyone who is using vim (and of course Nvim-R!) as a code editor for their development work. Alright, let’s get moving. We are going to create a small package offering a new ggplot theme to demonstrate the process.
Step 0: Install the required packages
install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;roxygen2&amp;quot;, &amp;quot;testthat&amp;quot;, &amp;quot;knitr&amp;quot;)) library(devtools) has_devel() The command has_devel() basically checks that everything is installed as expected.</description>
    </item>
    
    <item>
      <title>Just Enough... git</title>
      <link>https://paramjot.io/post/git-commands/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://paramjot.io/post/git-commands/</guid>
      <description>This is just a list of git commands I am currently using. There are tons of tutorials out there as well as quite a few cheat sheets. While those are mostly comprehensive resources, I tend to get distracted and try to learn all commands at once without using them in real projects. That doesn’t help much.
Initialize a local git repository
git init Cloning an existing project from github
git clone &amp;lt;project url here&amp;gt; Status Check</description>
    </item>
    
  </channel>
</rss>