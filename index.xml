<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paramjot Singh</title>
    <link>https://paramjot.io/</link>
    <description>Recent content on Paramjot Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Dec 2018 13:27:08 -0600</lastBuildDate>
    
	<atom:link href="https://paramjot.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quizme Workflow With Autoquiz</title>
      <link>https://paramjot.io/post/quizme-workflow-with-autoquiz/</link>
      <pubDate>Fri, 28 Dec 2018 13:27:08 -0600</pubDate>
      
      <guid>https://paramjot.io/post/quizme-workflow-with-autoquiz/</guid>
      <description>In earlier posts I have discussed in detail the design philosophy and development of quizme and autoquiz. While quizme manages the core functionality (storing quiz data and schedule quiz sessions), autoquiz works as a front end enabling to run quizme from terminal in interactive mode. Here I show the autoquiz in action for a typical quiz session.
Start autoquiz You start the quiz by launching autoquiz at the terminal command prompt.</description>
    </item>
    
    <item>
      <title>Autoquiz: A Wrapper to Run Quizme from Terminal</title>
      <link>https://paramjot.io/post/autoquiz/</link>
      <pubDate>Fri, 28 Dec 2018 06:09:53 -0600</pubDate>
      
      <guid>https://paramjot.io/post/autoquiz/</guid>
      <description>Quizme is an R package that allows you to create a personalized quiz repository and enables you to learn any material efficiently. Autoquiz is a simple wrapper script that allows you to run quizme directly from the terminal window. Here I discuss the advantages of running the tool from terminal as well as describe the implementation.
Benefits of Running Quizme from Command Line While quizme is quite powerful, integrating it to your daily workflow can be a bit of a challenge.</description>
    </item>
    
    <item>
      <title>Quizme Development</title>
      <link>https://paramjot.io/post/quizme-development/</link>
      <pubDate>Tue, 25 Dec 2018 18:34:58 -0600</pubDate>
      
      <guid>https://paramjot.io/post/quizme-development/</guid>
      <description>Quizme is an R package that allows you to create a personalized quiz repository and enables you to learn any material efficiently. Here I describe the functional logic underlying this package. I will discuss the layout of data structures employed and briefly describe the role of almost all of the user and backend functions.
Overall Structure At the beginning following data structures are created (or read if these exist from an earlier session):</description>
    </item>
    
    <item>
      <title>Quizme Design</title>
      <link>https://paramjot.io/post/quizme-design/</link>
      <pubDate>Sun, 23 Dec 2018 15:53:00 -0600</pubDate>
      
      <guid>https://paramjot.io/post/quizme-design/</guid>
      <description>Introduction The idea of quizme started with a need to learn R more effectively as I could not spend more than few hours a day outside of my regular life. My first approach to the problem, while I thought was neat, needed a lot of manual intervention. In this design, I had two text files - one containing questions and another containing questions and answers. A simple function would randomly select 10 questions.</description>
    </item>
    
    <item>
      <title>Testing and Continuous Integration in R</title>
      <link>https://paramjot.io/post/unit-testing-r-with-testthat/</link>
      <pubDate>Wed, 10 Oct 2018 05:27:31 -0500</pubDate>
      
      <guid>https://paramjot.io/post/unit-testing-r-with-testthat/</guid>
      <description>Often a useful function will do what we expected it to do. But sometimes it will do the unexpected. It is easy to find and address this unexpected behavior at the time of writing the function but becomes increasingly hard as the time goes by, codebase expands and dependencies become complex.
To decrease the frustration when unexpected behavior occurs, it is desirable to automate the testing process. This can be accomplished by adding the following steps in your package development workflow:</description>
    </item>
    
    <item>
      <title>Quizme Introduction and Usage</title>
      <link>https://paramjot.io/post/quizme-intro/</link>
      <pubDate>Mon, 08 Oct 2018 19:04:48 -0500</pubDate>
      
      <guid>https://paramjot.io/post/quizme-intro/</guid>
      <description>While writing code for our project, we often learn new functions and concepts. Unfortunately, we also forget the new knowledge quickly. Some of you might be lucky and remember the first time you read something. For the rest of us, we need deliberate practice. Wouldnâ€™t it be nice if we could practice any new material so we can recall it with ease? I have created a package, quizme, that can help you with that practice.</description>
    </item>
    
    <item>
      <title>Predicting a Numerical Outcome</title>
      <link>https://paramjot.io/post/predicting-a-numerical-outcome-with-linear-models/</link>
      <pubDate>Fri, 30 Mar 2018 20:53:08 -0500</pubDate>
      
      <guid>https://paramjot.io/post/predicting-a-numerical-outcome-with-linear-models/</guid>
      <description>A Constant Output Machine How Accurate is our Prediction? A Simple Linear Regression Machine Can We Improve Our Simple Linear Machine? More Predictors, Better Model?   In an earlier post, we learned a little bit about inference and some interesting tools that we can employ to make informed decisions based on our data instead of just guessing. You show this analysis to your friend who suggested to look for small engine cars to get better fuel economy.</description>
    </item>
    
    <item>
      <title>Persistent Plotting in R</title>
      <link>https://paramjot.io/post/persistent_plots/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paramjot.io/post/persistent_plots/</guid>
      <description>In this post, I describe the importance of persistent plots while carrying out a analysis. A case is made for simpler and persistent plots and the process to create the plots is demonstrated with an example. Finally, a package is created to stitch things together in a coherent fashion.
With the amount of available options in R today to create plots, it is easy to get distracted and miss the point of using plots in first place - to bring to attention something unique about the data which otherwise could be difficult, if not impossible, just looking at the raw numbers.</description>
    </item>
    
    <item>
      <title>Statistical Inference Using R</title>
      <link>https://paramjot.io/post/statistical-inference-using-r/</link>
      <pubDate>Thu, 22 Mar 2018 03:40:34 -0500</pubDate>
      
      <guid>https://paramjot.io/post/statistical-inference-using-r/</guid>
      <description>Everything Varies Mean - One Measure of Central Tendency Sample vs Population Estimating a Population Parameter from a Sample Quantity Variance - A Measure of Spread What is the Variance in Estimate of Mean Central Limit Theorem Key Facts about Normal Distribution Confidence Intervals for the Estimate of Mean Calculation of Confidence Intervals using R Functions Hypothesis Testing - A Systematic Approach to Compare Sample Data Potholes in Hypothesis Testing What is Power?</description>
    </item>
    
    <item>
      <title>Mastering R Programming</title>
      <link>https://paramjot.io/post/mastering-r-programming/</link>
      <pubDate>Sat, 17 Mar 2018 07:13:42 -0500</pubDate>
      
      <guid>https://paramjot.io/post/mastering-r-programming/</guid>
      <description>Functions Validating Function Inputs using Conditionals Repeating a Calculation Many Times Passing Arguments to a Function used inside User-Defined Function Peeking into a Function Where do these Functions and Objects live? Loading Objects in R Environment from R Scripts How Fast (or Slow) my Code Runs? Quick Introduction to Tibbles (and Dataframes) Exploring Built-In Datasets Extracting Atomic Vectors from a Tibble Where am I? Summary   In an earlier post we learned a key ingredient needed for creating any data product - atomic vectors.</description>
    </item>
    
    <item>
      <title>Mastering Atomic Vectors in R</title>
      <link>https://paramjot.io/post/mastering-atomic-vectors-in-r/</link>
      <pubDate>Sun, 11 Mar 2018 19:14:27 -0500</pubDate>
      
      <guid>https://paramjot.io/post/mastering-atomic-vectors-in-r/</guid>
      <description>Creating Our First Atomic Vector Peeking into our Vector Objects as Arguments to Functions Other Ways of Creating a Vector Vector Operations Chaining of Functions Selecting Few Elements of a Vector (Subsetting) More Uses of Logical Subsetting Two Types of Vectors Pick Elements Randomly Some Special Values Sequences for Loops Creating an empty vector Some Useful Vector Transformations Comparing Two Vectors Third Type of Atomic Vector Sorting Character Vectors and Changing Case Pattern Matching in Character Vectors using Regular Expressions Stringr Tools Factors - an Augmented Vector Type Summary   Atomic vectors in R are the fundamental data structures on which other more complex data structures are built.</description>
    </item>
    
    <item>
      <title>Just Enough... Vim</title>
      <link>https://paramjot.io/post/just-enough-vim/</link>
      <pubDate>Tue, 06 Mar 2018 05:05:20 -0600</pubDate>
      
      <guid>https://paramjot.io/post/just-enough-vim/</guid>
      <description>Vim is an extremely powerful editor. It is a bit scary in the beginning but once you spend a little bit time playing with it, you would start to realize its power. One of the great advantages I feel about learning Vim (when compared to a dedicated IDE) is that it is language neutral. So if you switch to learning a new language in the future, you do not have to learn the ins and outs of a new IDE, Vim will be there for you.</description>
    </item>
    
    <item>
      <title>Atreus Building Experience</title>
      <link>https://paramjot.io/post/atreus/</link>
      <pubDate>Mon, 05 Mar 2018 05:39:51 -0600</pubDate>
      
      <guid>https://paramjot.io/post/atreus/</guid>
      <description>Here I write about my atreus keyboard builing experience. Atreus is a keyboard with very unique features like small form factor, freedom to program any key the way you want, ability to work with any OS without installing any driver and the best of all - the freedom to build it with your own hands the way you like it. So in this regard, it is the experience of personalizing your hardware!</description>
    </item>
    
    <item>
      <title>Building R Package using Command Line</title>
      <link>https://paramjot.io/post/package_building/</link>
      <pubDate>Sat, 10 Feb 2018 05:04:40 -0600</pubDate>
      
      <guid>https://paramjot.io/post/package_building/</guid>
      <description>This post describes the process of building an R package without using RStudio. This can come in handy for anyone who is using vim (and of course Nvim-R!) as a code editor for their development work. Alright, letâ€™s get moving. We are going to create a small package offering a new ggplot theme to demonstrate the process.
Step 0: Install the required packages
install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;roxygen2&amp;quot;, &amp;quot;testthat&amp;quot;, &amp;quot;knitr&amp;quot;)) library(devtools) has_devel() The command has_devel() basically checks that everything is installed as expected.</description>
    </item>
    
    <item>
      <title>Creating a New ggplot2 Theme</title>
      <link>https://paramjot.io/post/creating_theme/</link>
      <pubDate>Thu, 08 Feb 2018 05:04:40 -0600</pubDate>
      
      <guid>https://paramjot.io/post/creating_theme/</guid>
      <description>This post introduces simple steps on how to create your own ggplot2 theme. Of course, it will not go into details of changing all the aspects. Instead, it will highlight the process using few useful elements.
Theme is basically a set of pre-defined(default) values for elements that make up a plot in ggplot2 library. Major elements are:
 Plot, the outermost area used by a plot. Think of this as letâ€™s say your A4 sheet on which you want to draw a plot.</description>
    </item>
    
    <item>
      <title>Exercise Quality Prediction using Machine Learning</title>
      <link>https://paramjot.io/post/exercise/</link>
      <pubDate>Sat, 30 Dec 2017 05:04:40 -0600</pubDate>
      
      <guid>https://paramjot.io/post/exercise/</guid>
      <description>Many devices exist today in the market (such as Jawbone Up, Nike FuelBand, and Fitbit) that inexpensively record, track and analyze data on personal physical activity. Although by using these devices, quantiy of the physical activity is often monitored, quality is rarely quantified. In this project, our goal is to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants in an attempt to predict whether the activity is performed correcly or not.</description>
    </item>
    
    <item>
      <title>Economic and Health Impact of Severe Weather Events</title>
      <link>https://paramjot.io/post/stormdata/</link>
      <pubDate>Thu, 28 Dec 2017 19:32:52 -0600</pubDate>
      
      <guid>https://paramjot.io/post/stormdata/</guid>
      <description>This post aims to explore the NOAA Storm Database and answer some basic questions about severe weather events focusing on their economic and health impact. The U.S. National Oceanic and Atmospheric Administration&amp;rsquo;s (NOAA) storm database tracks characteristics of major storms and weather events in the United States, including when and where they occur, as well as estimates of any fatalities, injuries, and property damage. The events in the database start in the year 1950 and end in November 2011.</description>
    </item>
    
    <item>
      <title>Just Enough... git</title>
      <link>https://paramjot.io/post/git-commands/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://paramjot.io/post/git-commands/</guid>
      <description>This is just a list of git commands I am currently using. There are tons of tutorials out there as well as quite a few cheat sheets. While those are mostly comprehensive resources, I tend to get distracted and try to learn all commands at once without using them in real projects. That doesnâ€™t help much.
Initialize a local git repository
git init Cloning an existing project from github
git clone &amp;lt;project url here&amp;gt; Status Check</description>
    </item>
    
    <item>
      <title>US Wind Energy Production (2016)</title>
      <link>https://paramjot.io/post/wind/</link>
      <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://paramjot.io/post/wind/</guid>
      <description>Last week I learned while listening to NPR that Texas is at the top when it comes to wind power production among all US states. While it is a suprising fact given that Texas is a conservative state and the article is an interesting read in itself, this led me to pull some data from US Department of Energy and create the map I have presented here.</description>
    </item>
    
    <item>
      <title>Global Sea Level Trends</title>
      <link>https://paramjot.io/post/sealevel/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://paramjot.io/post/sealevel/</guid>
      <description>This post takes a look at the global mean sea level trends as recorded by NASA since 1991. For the first 10 or so years, the observations were recorded with two measurement systems. In science, this is typically done to make sure that the instrument is not fooling us. Baking redundancy into a measurement system may have higher initial cost but saves a lot of money and answers important questions in the future.</description>
    </item>
    
  </channel>
</rss>